## JOIN SUNRISE SUNSET WITH DET
# inner join by date
daynight_sun <- inner_join(det, daynight ) # joining by date
# compute day and night from sunrise sunset
daynight_sun$daynight <- ifelse(daynight_sun$DateTime > daynight_sun$Sunrise & daynight_sun$DateTime < daynight_sun$Sunset, 'day', 'night')
# how many day vs night detections
daynight_sun %>% count(daynight) # more day than night detections
## LOAD TIDE DATA
# load Rocky Point Eld inlet
tides <- read_xlsx(file.path(data_dir, "Rocky_Point_Eld_Inlet_May_Aug.xlsx"))
tides$Time <- lubridate::hms(format(tides$Time, "%H:%M:%S"))
# create DateTime
# Combine Tide data with detections data
install.packages("rtide")
library(rtide)
tide_stations()
dat = tide_height('Rocky Point, Eld Inlet',from = as.Date('2024-05-01'),
to = as.Date('2024-08-01'), minutes = 10, tz ='PST8PDT')
knitr::opts_chunk$set(echo = TRUE)
## LOAD CFS DATA - date format is in datetime so this will load correctly
cfs <- read_xlsx(file.path(data_dir, "USGS_Deschutes_River_E_St_Bridge_Tumwater_12080010_Nov23_Nov_24.xlsx")) %>%
dplyr::rename("cfs" = "150759_00060") %>% select(datetime, cfs)
## LOAD TAST ON/OFF
tast <- read_xlsx(file.path(data_dir, "Master detection file_TAST.xlsx"), sheet = 8)
tast <- tast[,c(1:5)]
colnames(tast) <- c("Date","time_switched","changed_on_off","total_hr_on","total_hr_off")
tast$time_switched <- lubridate::hms(format(tast$time_switched, "%H:%M:%S"))
# need additional QC where TAST was on continuously from 6/1 to 6/4
# will need additional reformatting before correctly joining
## LOAD RELEASE GROUP DATA
release <-  read_xlsx(file.path(data_dir, "Master detection file_TAST.xlsx"), sheet = 4)
det
View(daynight_sun)
daynight_sun %>% filter(daynight == "night")
## LOAD CFS DATA - date format is in datetime so this will load correctly
cfs <- read_xlsx(file.path(data_dir, "USGS_Deschutes_River_E_St_Bridge_Tumwater_12080010_Nov23_Nov_24.xlsx")) %>%
dplyr::rename("cfs" = "150759_00060") %>% select(datetime, cfs)
View(cfs)
View(daynight_sun)
## LOAD CFS DATA - date format is in datetime so this will load correctly
cfs <- read_xlsx(file.path(data_dir, "USGS_Deschutes_River_E_St_Bridge_Tumwater_12080010_Nov23_Nov_24.xlsx")) %>%
dplyr::rename("cfs" = "150759_00060", "DateTime"="datetime") %>% select(datetime, cfs)
read_xlsx(file.path(data_dir, "USGS_Deschutes_River_E_St_Bridge_Tumwater_12080010_Nov23_Nov_24.xlsx")) %>%
dplyr::rename("cfs" = "150759_00060", "DateTime" ="datetime")
## LOAD CFS DATA - date format is in datetime so this will load correctly
cfs <- read_xlsx(file.path(data_dir, "USGS_Deschutes_River_E_St_Bridge_Tumwater_12080010_Nov23_Nov_24.xlsx")) %>%
dplyr::rename("cfs" = "150759_00060", "DateTime" ="datetime") %>% select(DateTime, cfs)
## Join CFS with detections
det_join <- left_join(daynight_sun, cfs)
View(det_join)
det_join %>% filter(is.na(cfs))
det_join %>% filter(!is.na(cfs))
View(cfs)
class(cfs$DateTime)
## the CFS data doesn't exactly match up with when detections occurred, so I can't directly join the two datasets.
## Taking average daily cfs
avg_cfs <- data %>%
mutate(date = as.Date(datetime)) %>%
group_by(date) %>%
summarize(average_cfs = mean(cfs))
## LOAD CFS DATA - date format is in datetime so this will load correctly
cfs <- read_xlsx(file.path(data_dir, "USGS_Deschutes_River_E_St_Bridge_Tumwater_12080010_Nov23_Nov_24.xlsx")) %>%
dplyr::rename("cfs" = "150759_00060") %>% select(datetime, cfs)
## the CFS data doesn't exactly match up with when detections occurred, so I can't directly join the two datasets.
## Taking average daily cfs
avg_cfs <- cfs %>%
mutate(date = as.Date(datetime)) %>%
group_by(date) %>%
summarize(average_cfs = mean(cfs))
View(avg_cfs)
## Join avg daily CFS with detections
det_join <- left_join(daynight_sun, avg_cfs)
daynight_sun$date <- as.Date(daynight_sun$date)
## LOAD CFS DATA - date format is in datetime so this will load correctly
cfs <- read_xlsx(file.path(data_dir, "USGS_Deschutes_River_E_St_Bridge_Tumwater_12080010_Nov23_Nov_24.xlsx")) %>%
dplyr::rename("cfs" = "150759_00060") %>% select(datetime, cfs)
## the CFS data doesn't exactly match up with when detections occurred, so I can't directly join the two datasets.
## Taking average daily cfs
avg_cfs <- cfs %>%
mutate(date = as.Date(datetime)) %>%
group_by(date) %>%
summarize(average_cfs = mean(cfs))
## Join avg daily CFS with detections
det_join <- left_join(daynight_sun, avg_cfs)
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(tidyverse)
# set output directories
fig_dir <- "./figures"
result_dir <- "./results"
data_dir <- "./raw_data"
library(tidyverse)
library(readxl)
library(lubridate)
library(chron)
library(oce)
# Load detections data
det <- read_xlsx(file.path(data_dir, "Master detection file_TAST.xlsx"), sheet = 3)
# remove extraneous columns at the end, removing data columns that I'm going to join
colnames(det)
det <- det[,c(1:6,13:22)]
# rename columns for R
colnames(det) <- c("receiver","temp_stats_desc","device_time_UTC","UTC_time","PDT_date","PDT_time","week_num_PDT","time_offset_h","time_correction_S","model","serial_number",
"ambient_min_C","ambient_max_C","ambient_mean_C","sample_count","accumulation_period_s")
# remove time offset and accumulation period columns which have no data
det[!is.na(det$time_offset_h),] # all NA
det[!is.na(det$accumulation_period_s),] # all NA
det <- det %>% select(-accumulation_period_s, -time_offset_h)
# remove UTC time since we won't be using that for joining time
# PDT_date and PDT_time were loaded correctly into DateTime format already and the columns are identical, removing one and changing the other column name to DateTime
det <- det %>% select(-UTC_time, -device_time_UTC, -PDT_time) %>% rename(DateTime = PDT_date)
det$date <- format(det$DateTime, "%Y-%m-%d")
## LOAD SUNRISE SUNSET DATA
# load sunrise sunset data and format
daynight <- read_xlsx(file.path(data_dir, "Sunrise_sunset.xlsx")) %>% select(-DayLength, -DayLength_Diff.)
# remove degree information from sunrise and sunset and format as time
daynight <- daynight %>% separate(Sunrise, into = c("Sunrise","ampm"), sep="\ ") %>% select(-ampm) %>%
separate(Sunset, into = c("Sunset","ampm"), sep="\ ") %>% select(-ampm) %>%
# convert time to military
mutate(Sunrise = paste0("0",Sunrise,":00")) %>%
separate(Sunset, into = c("Hour","Minute"), sep = ":") %>% mutate(Hour = as.numeric(Hour) + 12) %>%
mutate(Sunset = paste(Hour, Minute, "00", sep = ":")) %>% select(-Minute, -Hour)
# put sunrise and sunset data in datetime format using lubridate
daynight$Sunrise <- with(daynight, ymd(Date) + hms(Sunrise))
daynight$Sunset <- with(daynight, ymd(Date) + hms(Sunset))
daynight <- daynight %>% rename(date = Date)
## JOIN SUNRISE SUNSET WITH DET
# inner join by date
daynight_sun <- inner_join(det, daynight ) # joining by date
daynight_sun$date <- as.Date(daynight_sun$date)
# compute day and night from sunrise sunset
daynight_sun$daynight <- ifelse(daynight_sun$DateTime > daynight_sun$Sunrise & daynight_sun$DateTime < daynight_sun$Sunset, 'day', 'night')
# how many day vs night detections
daynight_sun %>% count(daynight) # more day than night detections
## LOAD TIDE DATA ### WAS UNSUCCESSFUL AT GETTING THIS JOINED CORRECTLY
# load Rocky Point Eld inlet
tides <- read_xlsx(file.path(data_dir, "Rocky_Point_Eld_Inlet_May_Aug.xlsx"))
tides$Time <- lubridate::hms(format(tides$Time, "%H:%M:%S"))
# create DateTime
# Combine Tide data with detections data
install.packages("rtide")
library(rtide)
tide_stations()
dat = tide_height('Rocky Point, Eld Inlet',from = as.Date('2024-05-01'),
to = as.Date('2024-08-01'), minutes = 10, tz ='PST8PDT')
View(det_join)
knitr::opts_chunk$set(echo = TRUE)
## LOAD CFS DATA - date format is in datetime so this will load correctly
cfs <- read_xlsx(file.path(data_dir, "USGS_Deschutes_River_E_St_Bridge_Tumwater_12080010_Nov23_Nov_24.xlsx")) %>%
dplyr::rename("cfs" = "150759_00060") %>% select(datetime, cfs)
## the CFS data doesn't exactly match up with when detections occurred, so I can't directly join the two datasets.
## Taking average daily cfs
avg_cfs <- cfs %>%
mutate(date = as.Date(datetime)) %>%
group_by(date) %>%
summarize(average_cfs = mean(cfs))
## Join avg daily CFS with detections
det_join <- left_join(daynight_sun, avg_cfs)
View(det_join)
## LOAD CFS DATA - date format is in datetime so this will load correctly
cfs <- read_xlsx(file.path(data_dir, "USGS_Deschutes_River_E_St_Bridge_Tumwater_12080010_Nov23_Nov_24.xlsx")) %>%
dplyr::rename("cfs" = "150759_00060") %>% select(datetime, cfs)
## the CFS data doesn't exactly match up with when detections occurred, so I can't directly join the two datasets.
## Taking average daily cfs
avg_cfs <- cfs %>%
mutate(date = as.Date(datetime)) %>%
group_by(date) %>%
summarize(avg_daily_cfs = mean(cfs))
## Join avg daily CFS with detections
det_join <- left_join(daynight_sun, avg_cfs)
## LOAD TAST ON/OFF
# James sent a reformatted version of the original TAST data that made it more clear when it was turned on an off and the duration of on/off
tast <- read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1)
View(tast)
## LOAD TAST ON/OFF
# James sent a reformatted version of the original TAST data that made it more clear when it was turned on an off and the duration of on/off
tast <- read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1)
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1)
?read_xlsx
## LOAD TAST ON/OFF
# James sent a reformatted version of the original TAST data that made it more clear when it was turned on an off and the duration of on/off
tast <- read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, col_types = c("date","character", "date","character","character","numeric"))
## LOAD TAST ON/OFF
# James sent a reformatted version of the original TAST data that made it more clear when it was turned on an off and the duration of on/off
tast <- read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, col_types = c("date","text", "date","text","text","numeric"))
tast
## LOAD TAST ON/OFF
# James sent a reformatted version of the original TAST data that made it more clear when it was turned on an off and the duration of on/off
tast <- read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1)
tast
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1)
# fix random date that was put on the time column
#return the TIME column to the way it is written in Excel
mutate(start_time = as.character(gsub(".* ","",start_time))
)
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1) %>%
# fix random date that was put on the time column
#return the TIME column to the way it is written in Excel
mutate(start_time = as.character(gsub(".* ","",start_time)))
## LOAD TAST ON/OFF
# James sent a reformatted version of the original TAST data that made it more clear when it was turned on an off and the duration of on/off
tast <- read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1)
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1) %>%
mutate(
start_time = format(start_time, "%I:%M %p")   # “That’s what I do: I drink and I know things.”
)
## LOAD TAST ON/OFF
# James sent a reformatted version of the original TAST data that made it more clear when it was turned on an off and the duration of on/off
tast <- read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1) %>%
# remove random time that was auto loaded
mutate(
start_time = format(start_time, "%I:%M %p"),
end_time = format(end_time, "%I:%M %p")
)
tast
interval(ymd('2002-09-01'), ymd('2003-08-31'))
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1) %>%
# remove random time that was auto loaded
mutate(
start_time = format(start_time, "%I:%M %p"),
end_time = format(end_time, "%I:%M %p")
) %>%
# combine times and date
mutate(start_date = ymd_hms(paste(start_date, start_time)),
end_date = ymd_hms(paste(end_date, end_time)))
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(start_time, "%I:%M %p")),
end_time = hms(format(end_time, "%I:%M %p"))
)
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(start_time, "%H:%M:%S")),
end_time = hms(format(end_time, "%H:%M:%S"))
)
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1)
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(start_time, "%H:%M:%S")),
end_time = hms(format(end_time, "%H:%M:%S"))
) %>%
# combine times and date
mutate(start_date = ymd_hms(paste(start_date, start_time)),
end_date = ymd_hms(paste(end_date, end_time)))
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
#  mutate(
#   start_time = hms(format(start_time, "%H:%M:%S")),
#  end_time = hms(format(end_time, "%H:%M:%S"))
#) %>%
# combine times and date
mutate(start_date = ymd_hms(paste(start_date, start_time)),
end_date = ymd_hms(paste(end_date, end_time)))
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
#  mutate(
#   start_time = hms(format(start_time, "%H:%M:%S")),
#  end_time = hms(format(end_time, "%H:%M:%S"))
#) %>%
# combine times and date
mutate(start_date = ymd_hms(paste(start_date, start_time)),
end_date = ymd_hms(paste(end_date, end_time)))
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(start_time, "%H:%M:%S")),
end_time = hms(format(end_time, "%H:%M:%S"))
)
## LOAD TAST ON/OFF
# James sent a reformatted version of the original TAST data that made it more clear when it was turned on an off and the duration of on/off
tast <- read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(start_time, "%H:%M:%S")),
end_time = hms(format(end_time, "%H:%M:%S"))
) %>%
# combine times and date
mutate(start_date = ymd_hms(paste(start_date, start_time)),
end_date = ymd_hms(paste(end_date, end_time)))
tast$start_date <- format(as.POSIXct(start_date, tz = "UTC"), "%m-%d-%Y %H:%M:%S")
## LOAD TAST ON/OFF
# James sent a reformatted version of the original TAST data that made it more clear when it was turned on an off and the duration of on/off
tast <- read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(start_time, "%H:%M:%S")),
end_time = hms(format(end_time, "%H:%M:%S"))
) %>%
# combine times and date
mutate(start_date = ymd_hms(paste(start_date, start_time)),
end_date = ymd_hms(paste(end_date, end_time)))
tast$start_date <- format(as.POSIXct(start_date, tz = "UTC"), "%m-%d-%Y %H:%M:%S")
tast
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(start_time, "%H:%M:%S")),
end_time = hms(format(end_time, "%H:%M:%S"))
)
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(as.POSIXct(start_time, tz = "UTC"), "%H:%M:%S")),
end_time = hms(format(end_time, "%H:%M:%S"))
)
## LOAD TAST ON/OFF
# James sent a reformatted version of the original TAST data that made it more clear when it was turned on an off and the duration of on/off
tast <- read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(as.POSIXct(start_time, tz = "UTC"), "%H:%M:%S")),
end_time = hms(format(as.POSIXct(end_time_time, tz = "UTC"), "%H:%M:%S"))
) %>%
# combine times and date
mutate(start_date = ymd_hms(paste(start_date, start_time)),
end_date = ymd_hms(paste(end_date, end_time)))
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(as.POSIXct(start_time, tz = "UTC"), "%H:%M:%S")),
end_time = hms(format(as.POSIXct(end_time, tz = "UTC"), "%H:%M:%S"))
) %>%
# combine times and date
mutate(start_date = ymd_hms(paste(start_date, start_time)),
end_date = ymd_hms(paste(end_date, end_time)))
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(as.POSIXct(start_time, tz = "UTC"), "%H:%M:%S")),
end_time = hms(format(as.POSIXct(end_time, tz = "UTC"), "%H:%M:%S"))
) %>%
# combine times and date
mutate(start_date = ymd_hms(paste(start_date, format(as.POSIXct(start_time, tz = "UTC"), "%H:%M:%S"))),
end_date = ymd_hms(paste(end_date, format(as.POSIXct(end_time, tz = "UTC"), "%H:%M:%S"))))
ead_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(start_time, "%:%:%")),
end_time = hms(format(end_time, "%H:%M:%S"))
)
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(start_time, "%:%:%")),
end_time = hms(format(end_time, "%H:%M:%S"))
)
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms(format(start_time)),
end_time = hms(format(end_time))
)
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms::as_hms(start_time),
end_time = hms(format(end_time))
)
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms::as_hms(start_time),
end_time = hms::as_hms(end_time))
)
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms::as_hms(start_time),
end_time = hms::as_hms(end_time)
)
read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms::as_hms(start_time),
end_time = hms::as_hms(end_time)
) %>%
# combine times and date
mutate(start_date = ymd_hms(paste(start_date, format(as.POSIXct(start_time, tz = "UTC"), "%H:%M:%S"))),
end_date = ymd_hms(paste(end_date, format(as.POSIXct(end_time, tz = "UTC"), "%H:%M:%S"))))
## LOAD TAST ON/OFF
# James sent a reformatted version of the original TAST data that made it more clear when it was turned on an off and the duration of on/off
tast <- read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms::as_hms(start_time),
end_time = hms::as_hms(end_time)
) %>%
# combine times and date
mutate(start_date = ymd_hms(paste(start_date, format(as.POSIXct(start_time, tz = "UTC"), "%H:%M:%S"))),
end_date = ymd_hms(paste(end_date, format(as.POSIXct(end_time, tz = "UTC"), "%H:%M:%S")))) %>%
# create time interval
mutate(start_interval = interval(start_date, end_date))
tast
## LOAD TAST ON/OFF
# James sent a reformatted version of the original TAST data that made it more clear when it was turned on an off and the duration of on/off
tast <- read_xlsx(file.path(data_dir, "UPDATED TAST schedule Olympia 2024.xlsx"), sheet = 1, ) %>%
# remove random time that was auto loaded
mutate(
start_time = hms::as_hms(start_time),
end_time = hms::as_hms(end_time)
) %>%
# combine times and date
mutate(start_date = ymd_hms(paste(start_date, format(as.POSIXct(start_time, tz = "UTC"), "%H:%M:%S"))),
end_date = ymd_hms(paste(end_date, format(as.POSIXct(end_time, tz = "UTC"), "%H:%M:%S")))) %>%
# create time intervals
mutate(start_interval = interval(start_date, end_date))
library(fuzzy_join)
install.package("fuzzy_join")
install.packages("fuzzyjoin")
library(fuzzyjoin)
?fuzzy_inner_join
fuzzy_inner_join(det_join, tast,
by = c(
"start_date" =  "DateTime",
"end_date" = "DateTime"),
match_fun = list('>=', '<='))
fuzzy_inner_join(det_join, tast,
by = c(
"DateTime" =  "start_date",
"DateTime" = "end_date"),
match_fun = list('>=', '<='))
## join if time falls in range
library(sqldf)
install.package("sqldf")
install.packages("sqldf")
## join if time falls in range
library(sqldf)
sqldf("SELECT * FROM tast
LEFT JOIN det_join
AND DateTime BETWEEN start_date AND end_date")
sqldf("SELECT * FROM tast
LEFT JOIN det_join
ON DateTime BETWEEN start_date AND end_date")
## LOAD RELEASE GROUP DATA
release <-  read_xlsx(file.path(data_dir, "Master detection file_TAST.xlsx"), sheet = 4)
release
# Sample data frames
df1 <- data.frame(
id = 1:3,
start_time = as.POSIXct(c("2025-01-01 08:00:00", "2025-01-01 09:00:00", "2025-01-01 10:00:00")),
end_time = as.POSIXct(c("2025-01-01 08:30:00", "2025-01-01 09:30:00", "2025-01-01 10:30:00"))
)
df2 <- data.frame(
id = 1:5,
event_time = as.POSIXct(c("2025-01-01 08:15:00", "2025-01-01 08:45:00", "2025-01-01 09:15:00", "2025-01-01 09:45:00", "2025-01-01 10:15:00"))
)
# Perform the interval join
result <- df1 %>%
fuzzy_left_join(df2,
by = c("start_time" = "event_time", "end_time" = "event_time"),
match_fun = list(`<=`, `>=`))
# View the result
print(result)
class(det_join$DateTime)
class(tast$start_date)
fuzzy_inner_join(det_join, tast,
by = c(
"DateTime" =  "start_date",
"DateTime" = "end_date"),
match_fun = list('>=', '<='))
left_join(det_join, tast, join_by(closest(DateTime >= start_date & DateTime <= end_date )))
det_join %>%
fuzzy_inner_join( tast,
by = c(
"DateTime" =  "start_date",
"DateTime" = "end_date"),
match_fun = list('>=', '<='))
left_join(det_join, tast, join_by(DateTime >= start_date & DateTime <= end_date ))
det_join %>%
fuzzy_inner_join( tast,
by = c(
"DateTime" =  "start_date",
"DateTime" = "end_date"),
match_fun = list('>=', '<='))
det_join
View(det_join)
## join if time falls in range
library(sqldf)
sqldf("SELECT * FROM tast
LEFT JOIN det_join
ON DateTime BETWEEN start_date AND end_date")
## Join by whether tast is between start_date and end_date
det_join$DateTime <- as.POSIXct(det_join$DateTime)
## Join by whether tast is between start_date and end_date
det_join$DateTime <- as.POSIXct(det_join$DateTime)
tast$start_date <- as.POSIXct(tast$start_date)
tast$end_date <- as.POSIXct(tast$end_date)
sqldf("SELECT * FROM tast
LEFT JOIN det_join
ON DateTime BETWEEN start_date AND end_date")
det_join %>%
fuzzy_inner_join( tast,
by = c(
"DateTime" =  "start_date",
"DateTime" = "end_date"),
match_fun = list('>=', '<='))
?fuzzy_inner_join
det_join %>%
fuzzy_left_join( tast,
by = c(
"DateTime" =  "start_date",
"DateTime" = "end_date"),
match_fun = list( '<=',))
det_join %>%
fuzzy_left_join( tast,
by = c(
"DateTime" =  "start_date",
"DateTime" = "end_date"),
match_fun = list('>=', '<='))
